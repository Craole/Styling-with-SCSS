@use "../constants"as *;
// @use '../functions/f-mapper'as *;
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';

//doc-> Validate color.
@function color-validate($color) {

  @if type-of($color) !=color {
    @error '[ Invalid color -> `#{$color}` ]'
  }

  @else {
    @return $color;
  }
}

//doc-> Swatch( <color>, <[ -100 White | 0 Neutral | 100 Black ]> )
@function color-swatch($color, $swatch: 0) {
  $SWATCH: math.percentage(math.div(math.clamp(-100, $swatch, 100), 100));

  @if $SWATCH>=0 {
    @return mix(black, $color, math.abs($SWATCH));
  }

  @else {
    @return mix(white, $color, math.abs($SWATCH));
  }
}

//doc-> Alpha( <color>, <[ 0 Transparent | 1 Opaque ]> )
@function color-alpha($color, $alpha: 1) {
  $ALPHA: (math.clamp(0, math.abs($alpha), 1) - 1);
  @return color.adjust($color, $alpha: $ALPHA);
}

//doc -> Adjust a color's shade and opacity;\
@function color-adjust($color, $swatch: 0, $alpha: 1) {
  $COLOR: color-validate($color);
  $SWATCH: color-swatch($COLOR, $swatch);
  $ALPHA: color-alpha($SWATCH, $alpha);
  @return $ALPHA;
}

//doc-> Pull color from Pallette map
@function color-palette($palette, $color) {

  @if not map-has-key($palettes, $palette) {
    $KEYS: map-keys($map: $palettes);
    @error '[ Invalid palette -> \'#{$palette}\' ] [ Valid palettes -> #{$KEYS} ]';
  }

  @else if not map-has-key($palettes, $palette, $color) {
    $KEYS: map-keys(map-get($palettes, $palette));
    @error '[ Invalid color -> \'#{$color}\' ] [ Valid colors -> #{$KEYS} ]';
  }

  @else {
    @return map-get($palettes, $palette, $color);
  }
}


//doc-> Generate color family of pre-defined shades.
@function color-family($color) {
  $lo: 45;
  $md: 75;
  $hi: 90;
  $whiter: -0.86;
  $blacker: 1.06;


  @return ( //@ Color Family
    'lightest': color-swatch($color, $hi * $whiter),
    'lighter': color-swatch($color, $md * $whiter),
    'light': color-swatch($color, $lo * $whiter),
    'base': $color,
    'dark': color-swatch($color, $lo * $blacker),
    'darker': color-swatch($color, $md * $blacker),
    'darkest': color-swatch($color, $hi * $blacker),
  );
}


@function color-shade($color, $shade) {
  $family: color-family($color);
  $keys: map-keys($map: $family);

  @if not map-has-key($family, $shade) {
    @error '[ Invalid swatch -> #{$shade} ] [ Valid swatches -> #{$keys} ]';
  }

  @else {
    @return map-get($family, $shade);
  }
}

//doc-> Pull theme, color and shade.
@function colah($palette: 'main', $color: 'primary', $shade: 'base', $alpha: 1) {
  $COLOR: color-palette($palette, $color);

  // @return color-alpha(color-shade(color-palette($palette, $color),
  //       $swatch),
  //     $alpha);
  @return $COLOR
}

@debug colah('diadora', 'clr_1', 'dark', 0.8);