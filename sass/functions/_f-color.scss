@use "../constants"as *;
// @use '../functions/f-mapper'as *;
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';

//doc-> Validate color.
@function color-validate($COLOR) {

  @if type-of($COLOR) !=color {
    @error '[ Invalid color -> `#{$COLOR}` ]'
  }

  @else {
    @return $COLOR;
  }
}

//doc-> Swatch(Shade and Tine)
@function swatch($SWATCH) {
  @if $SWATCH>=0 {
    $BLACK: math.abs($SWATCH);
    @return $BLACK;
  }

  @else {
    $WHITE: math.abs($SWATCH);
    @return $WHITE;
  }
}

//doc -> Adjust a color's shade and opacity;\
@function color-adjust($color, $swatch: 0, $opacity: 100) {
  $COLOR: color-validate($color);
  $SWATCH: math.percentage(math.div(math.clamp(-100, $swatch, 100), 100));
  $ALPHA: (math.clamp(0, math.abs($opacity), 1) - 1);

  @if $SWATCH>=0 {
    $SWATCH: math.abs($SWATCH);
    $MIX: color.mix(black, $COLOR, $SWATCH);
    $COLOR: color.adjust($color: $MIX, $alpha: $ALPHA);
    @return $COLOR;
  }

  @else {
    $SWATCH: math.abs($SWATCH);
    $MIX: color.mix(white, $COLOR, $SWATCH);
    $COLOR: color.adjust($color: $MIX, $alpha: $ALPHA);

    @return $COLOR;

  }
}

$color: #a58687;
$COLOR: color-adjust($color, 80);

@debug 'ORIG_COLOR|> \
Whiteness: #{color.whiteness($color)}, \
Blackness: #{color.blackness($color)}, \
Opacity: #{color.opacity($color)}, \
Color: #{$color}';

@debug ' NEW_COLOR|> \
Whiteness: #{color.whiteness($COLOR)}, \
Blackness: #{color.blackness($COLOR)}, \
Opacity: #{color.opacity($COLOR)}, \
Color: #{$COLOR}';


//doc-> Lighten a $color by mixing it with white.
@function color-tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

//doc-> Darken a $color by mixing it with black.
@function color-shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}


//doc-> Pull color from Pallette map
@function color-palette($PALETTE, $COLOR) {

  @if not map-has-key($palettes, $PALETTE) {
    $KEYS: map-keys($map: $palettes);
    @error '[ Invalid palette -> \'#{$palette}\' ] [ Valid palettes -> #{$KEYS} ]';
  }

  @else if not map-has-key($palettes, $PALETTE, $COLOR) {
    $KEYS: map-keys(map-get($palettes, $PALETTE));
    @error '[ Invalid color -> \'#{$COLOR}\' ] [ Valid colors -> #{$KEYS} ]';
  }

  @else {
    @return map-get($palettes, $PALETTE, $COLOR);
  }
}


//doc-> Generate color palette based on selected color.
@function color-family($COLOR) {
  $lo: -0.25;
  $md: -0.5;
  $hi: -0.75;

  $FAMILY: ( //@ Color Family
      // 'lightest': color-adjust($COLOR, $lo),
      // 'lighter': color-adjust($COLOR, $md),
      // 'light': color-adjust($COLOR, $hi),
      // 'base': $COLOR,
      // 'dark': color-adjust($COLOR, math.abs($hi)),
      // 'darker': color-adjust($COLOR, math.abs($md)),
      // 'darkest': color-adjust($COLOR, math.abs($lo)),
      'lightest': color-adjust($COLOR, -0.25),
      'lighter': color-adjust($COLOR, -0.5),
      'light': color-adjust($COLOR, -0.75),
      'base': $COLOR,
      'dark': color-adjust($COLOR, math.abs($hi)),
      'darker': color-adjust($COLOR, math.abs($md)),
      'darkest': color-adjust($COLOR, math.abs($lo)),
    );

  @return $FAMILY;

}

@function color-swatch($COLOR, $SWATCH) {
  $FAMILY: color-family($COLOR);
  $KEYS: map-keys($map: $FAMILY);

  @if not map-has-key($FAMILY, $SWATCH) {
    @error '[ Invalid swatch -> #{$SWATCH} ] [ Valid swatches -> #{$KEYS} ]';
  }

  @else {
    @return map-get($FAMILY, $SWATCH);
  }
}

//doc-> Pull theme, color and swatch.
@function colah($PALETTE, $COLOR, $SWATCH) {

  $COLOR: color-palette($PALETTE, $COLOR);
  $COLAH: color-swatch($COLOR, $SWATCH);

  @return $COLAH;
}