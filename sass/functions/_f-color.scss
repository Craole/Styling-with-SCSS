@use "../constants"as *;
// @use '../functions/f-mapper'as *;
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';

//doc-> Validate color.
@function color-validate($color) {

  @if type-of($color) !=color {
    @error '[ Invalid color -> `#{$color}` ]'
  }

  @else {
    @return $color;
  }
}

// @debug color-validate(pink);
// @debug color-validate(#312e91);
// @debug color-validate(#a31c6022);
// @debug color-validate(hsla(163, 74%, 38%, 0.834));
// @debug color-validate(rgba(155, 171, 53, 0.133));

//doc-> Pull color from Pallette map
@function color-palette($palette, $color) {

  @if not map-has-key($palettes, $palette) {
    $KEYS: map-keys($map: $palettes);
    @error '[ Invalid palette -> \'#{$palette}\' ] [ Valid palettes -> #{$KEYS} ]';
  }

  @else if not map-has-key($palettes, $palette, $color) {
    $KEYS: map-keys(map-get($palettes, $palette));
    @error '[ Invalid color -> \'#{$color}\' ] [ Valid colors -> #{$KEYS} ]';
  }

  @else {
    @return map-get($palettes, $palette, $color);
  }
}

// @debug color-palette('main', 'secondary');

//doc-> Alpha( <color>, <[ 0 Transparent | 1 Opaque ]> )
@function color-alpha($color, $alpha: 1) {
  $ALPHA: (math.clamp(0, math.abs($alpha), 1) - 1);
  @return color.adjust($color, $alpha: $ALPHA);
}

// @debug color-alpha(red, 0.4);
// @debug color-alpha(hsl(0, 100%, 50%), 0.4);

//doc-> Swatch( <color>, <[ -100 White | 0 Neutral | 100 Black ]> )
@function color-swatch($color, $swatch: 0) {
  $SWATCH: math.percentage(math.div(math.clamp(-100, $swatch, 100), 100));

  @if $SWATCH>=0 {
    @return mix(black, $color, math.abs($SWATCH));
  }

  @else {
    @return mix(white, $color, math.abs($SWATCH));
  }
}

// @debug color-swatch(blue, 79);
// @debug color-swatch(blue, -61);

//doc-> Generate color shades.
@function color-shade($color, $shade: null) {
  $lo: 45;
  $md: 75;
  $hi: 90;
  $whiter: -0.86;
  $blacker: 1.06;

  $SHADES: ( //@ Color Family
      'lightest': color-swatch($color, $hi * $whiter),
      'lighter': color-swatch($color, $md * $whiter),
      'light': color-swatch($color, $lo * $whiter),
      'base': $color,
      'dark': color-swatch($color, $lo * $blacker),
      'darker': color-swatch($color, $md * $blacker),
      'darkest': color-swatch($color, $hi * $blacker),
    );

  @if $shade==null {
    @return $SHADES;
  }

  @else {
    $KEYS: map-keys($map: $SHADES);

    @if not map-has-key($SHADES, $shade) {
      @error '[ Invalid swatch -> #{$shade} ] [ Valid swatches -> #{$KEYS} ]';
    }

    @else {
      @return map-get($SHADES, $shade);
    }
  }
}

// @debug color-shade(violet);
// @debug color-shade(violet,'lighter');

//doc -> Adjust a color's swatch and opacity;
@function colah($color, $swatch: 0, $alpha: 1) {
  $COLOR: color-validate($color);
  $SWATCH: color-swatch($COLOR, $swatch);
  $ALPHA: color-alpha($SWATCH, $alpha);
  $COLAH: $ALPHA;
  @return $COLAH;
}

// @debug colah(turquoise,80,.75);

//doc -> Adjust a palette color's shade and opacity;
@function colah-sys($palette: 'main', $color: 'primary', $shade: 'base', $alpha: 1) {
  $COLOR: color-palette($palette, $color);
  $SHADE: color-shade($COLOR, $shade);
  $ALPHA: color-alpha($SHADE, $alpha);
  $COLAH: $ALPHA;
  @return $COLAH;
}

// @debug colah-sys('assiko', 'clr_5', 'dark');