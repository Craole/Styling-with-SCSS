@use 'sass:math';

// doc-> Contrast
/*
Refeerence: https://medium.com/@tonipinel/how-to-get-an-accurate-contrast-color-with-sass-b0ebc01bf17f
*/
@function de-gamma($n) {
  @if $n <=0.03928 {
    @return math.div($n, 12.92);
  }

  @else {
    @return math.pow(math.div(($n + 0.055), 1.055), 2.4);
  }
}

// sRGB BT-709 BRIGHTNESS
@function brightness($c) {
  $rlin: de-gamma(math.div(red($c), 255));
  $glin: de-gamma(math.div(green($c), 255));
  $blin: de-gamma(math.div(blue($c), 255));
  @return (0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin) * 100;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: #000000, $light: #FFFFFF) {
  @if $color==null {
    @return null;
  }

  @else {
    $color-brightness: brightness($color);
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}

//doc-> Solution 2
@function color_luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: math.div($rgb, 255);

    $rgb: if($rgb < .03928,
        math.div($rgb, 12.92),
        math.pow(math.div(($rgb + .055), 1.055), 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return .2126 * nth($rgba2, 1)+.7152 * nth($rgba2, 2)+0.0722 * nth($rgba2, 3);
}

@function color_contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color_luminance($color1) + .05;
  $luminance2: color_luminance($color2) + .05;
  $ratio: math.div($luminance1, $luminance2);

  @if $luminance2>$luminance1 {
    $ratio: math.div(1, $ratio);
  }

  $ratio: math.div(math.round($ratio * 10), 10);

  @return $ratio;
}

@function pick_best_color($base, $colors, $tolerance: 0) {
  $contrast: color_contrast($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current_contrast: color_contrast($base, nth($colors, $i));

    @if ($current_contrast - $contrast > $tolerance) {
      $contrast: color_contrast($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }

  @if ($contrast < 3) {
    @warn "Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}";
  }

  @return $best;
}

// @debug color_contrast(red, white);
@debug pick_best_color(red, pink);
// @debug color-contrast(red, pink);